<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

	<!-- namespace：必须与对应的接口全类名一致
	 id:必须与对应接口的某个对应的方法名一致	-->
<mapper namespace="com.lxm.dao.MeetingRoomMapper">

	<resultMap type="MeetingRoom" id="meetingRoomMap">
		<!-- column值是数据表的列名，property值是实体类的get属性 -->
		<id column="mr_id" property="mrId" /> <!-- 唯一的主键 -->
		<result column="no" property="no" /> <!-- 可以有多个 -->
		<result column="mr_name" property="mrName" />
		<result column="capacity" property="capacity" />
		<result column="occupation" property="occupation" />
	</resultMap>

	<select id="pagination" resultMap="meetingRoomMap">
		select * from meeting_room
		<where>
			<if test="meetingRoom.no != null and meetingRoom.no !=''">
				and no like '%${meetingRoom.no}%' 
	        </if>
			<if test="meetingRoom.mrName != null and meetingRoom.mrName != ''">
				and mr_name like '%${meetingRoom.mrName}%' 
	        </if>
			<if test="meetingRoom.capacity > 0">
				and capacity >= #{meetingRoom.capacity} 
	        </if>
			and mr_state='no'
		</where>
		order by mr_id limit #{pageStart}, #{pageSize}
	</select>

	<select id="getRows" parameterType="MeetingRoom" resultType="int">
		select count(*) from meeting_room
		<where>
			<if test="no != null and no !=''">
				and no like '%${no}%' 
	        </if>
			<if test="mrName != null and mrName != ''">
				and mr_name like '%${mrName}%'
	        </if>
			<if test="capacity > 0">
				and capacity >= #{capacity}
	        </if>
			and mr_state='no'
		</where>
	</select>

	<select id="queryAvailable" resultMap="meetingRoomMap">
		SELECT * FROM meeting_room AS mr WHERE capacity >= #{capacity} AND
		mr_state='no' and
		NOT EXISTS (
		(SELECT * FROM meeting AS m WHERE 
		<![CDATA[ DATE_FORMAT(m.start_time, '%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s') ]]> 
		<![CDATA[ AND DATE_FORMAT(m.end_time, '%Y-%m-%d %H:%i:%s') > DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s') ]]>
		AND m.cancel = 'no' AND m.mr_id = mr.mr_id)
		UNION
		(SELECT * FROM meeting AS mt WHERE 
		<![CDATA[ DATE_FORMAT(mt.end_time, '%Y-%m-%d %H:%i:%s') >= DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s') ]]> 
		<![CDATA[ AND DATE_FORMAT(mt.start_time, '%Y-%m-%d %H:%i:%s') < DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s') ]]>
		AND mt.cancel = 'no' AND mt.mr_id = mr.mr_id)
		UNION
		(SELECT * FROM meeting AS me WHERE 
		<![CDATA[ DATE_FORMAT(me.start_time, '%Y-%m-%d %H:%i:%s') >= DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s') ]]>
		<![CDATA[ AND DATE_FORMAT(me.end_time, '%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s') ]]>
		AND me.cancel = 'no' AND me.mr_id = mr.mr_id)
		)
	</select>

	<select id="queryAvailableWithoutMid" resultMap="meetingRoomMap">
		SELECT * FROM meeting_room AS mr WHERE capacity >= #{capacity} AND
		mr_state='no' and
		NOT EXISTS (
		(SELECT * FROM meeting AS m WHERE m.m_id != #{mId} and 
		<![CDATA[ DATE_FORMAT(m.start_time, '%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s') ]]> 
		<![CDATA[ AND DATE_FORMAT(m.end_time, '%Y-%m-%d %H:%i:%s') > DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s') ]]>
		AND m.cancel = 'no' AND m.mr_id = mr.mr_id)
		UNION
		(SELECT * FROM meeting AS mt WHERE mt.m_id != #{mId} and 
		<![CDATA[ DATE_FORMAT(mt.end_time, '%Y-%m-%d %H:%i:%s') >= DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s') ]]> 
		<![CDATA[ AND DATE_FORMAT(mt.start_time, '%Y-%m-%d %H:%i:%s') < DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s') ]]>
		AND mt.cancel = 'no' AND mt.mr_id = mr.mr_id)
		UNION
		(SELECT * FROM meeting AS me WHERE me.m_id != #{mId} and  
		<![CDATA[ DATE_FORMAT(me.start_time, '%Y-%m-%d %H:%i:%s') >= DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s') ]]>
		<![CDATA[ AND DATE_FORMAT(me.end_time, '%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s') ]]>
		AND me.cancel = 'no' AND me.mr_id = mr.mr_id)
		)
	</select>

	<select id="queryById" resultMap="meetingRoomMap">
		select * from meeting_room where mr_id = #{mrId}
	</select>

	<select id="queryNumByNo" parameterType="String" resultType="int">
		select count(*) from meeting_room where no = #{no} and mr_id !=
		#{mrId}
	</select>

	<update id="modify" parameterType="MeetingRoom">
		update meeting_room
		set no = #{no}, mr_name = #{mrName}, capacity = #{capacity}
		where mr_id = #{mrId}
	</update>

	<insert id="add" parameterType="MeetingRoom">
		insert into meeting_room(mr_name, no, capacity) values(#{mrName}, #{no},
		#{capacity})
	</insert>

	<update id="remove" parameterType="int">
		update meeting_room set mr_state = 'yes' where mr_id = #{mrId}
	</update>

</mapper>