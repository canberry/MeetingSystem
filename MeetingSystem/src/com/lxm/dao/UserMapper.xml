<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

	<!-- namespace：必须与对应的接口全类名一致
	 id:必须与对应接口的某个对应的方法名一致	-->
<mapper namespace="com.lxm.dao.UserMapper">

	<!-- 采用结果映射的形式查询 -->
	<resultMap type="User" id="userMap">
		<!-- column值是数据表的列名，property值是实体类的get属性 -->
		<id column="user_id" property="userId" /> <!-- 唯一的主键 -->
		<result column="user_name" property="userName" /> <!-- 可以有多个 -->
		<result column="user_role" property="userRole" />
	</resultMap>
	
	<resultMap type="User" id="uMap">
		<!-- column值是数据表的列名，property值是实体类的get属性 -->
		<id column="user_id" property="userId" /> <!-- 唯一的主键 -->
		<result column="user_name" property="userName" /> <!-- 可以有多个 -->
		<result column="sex" property="sex" />
		<result column="position" property="position" />
	</resultMap>

	<select id="login" parameterType="User" resultType="int">
		select
		count(*) from user where user_name=#{userName} and
		password=#{password} and user_state='no'
	</select>

	<select id="queryById" parameterType="int" resultMap="userMap">
		select * from user where user_id=#{userId}
	</select>

	<select id="queryByExample" parameterType="User" resultMap="userMap">
		select * from user
		<where>
			<if test="userId != 0">
				and user_id=#{userId}
	        </if>
			<if test="userName != null and userName != ''">
				and user_name=#{userName}
	        </if>
			<if test="password != null and password !=''">
				and password=#{password}
	        </if>
		</where>
	</select>

	<select id="queryLikeExample" resultMap="userMap">
		select * from user where user_name like '%${userName}%' and user_state='no' 
	</select>

	<insert id="add" parameterType="User" keyProperty="userId"
		useGeneratedKeys="true">
		insert into user(user_name, password) values(#{userName}, #{password})
	</insert>
	
	<insert id="register" parameterType="User" keyProperty="userId"
		useGeneratedKeys="true">
		insert into user(user_name, position, user_role) values(#{userName}, #{position}, #{userRole})
	</insert>

	<update id="modify" parameterType="User">
		update user
		<set>
			<if test="password != null and password != ''">
				password = #{password}, 
            </if>
			<if test="signature != null and signature != ''">
				signature = #{signature}, 
            </if>
			<if test="avatar != null and avatar != ''">
				avatar = #{avatar}, 
            </if>
			<if test="sex != null and sex != ''">
				sex = #{sex}, 
            </if>
			<if test="userRole != null and userRole != ''">
				user_role = #{userRole}, 
            </if>
			<if test="nickname != null and nickname != ''">
				nickname = #{nickname},
            </if>
			<if test="mobile != null and mobile != ''">
				mobile = #{mobile},
            </if>
			<if test="email != null and email != ''">
				email = #{email},
            </if>
			<if test="address != null and address != ''">
				address = #{address},
            </if>
            <if test="position != null and position != ''">
                position = #{position}, 
            </if>
            <if test="userState != null and userState != ''">
                user_state = #{userState}, 
            </if>
		</set>
		where user_id=#{userId}
	</update>

	<select id="queryAvailableUsersByIds" resultMap="uMap">
		SELECT DISTINCT(u.user_id), u.user_name, u.sex, u.position FROM USER u INNER JOIN
		meeting_detail md ON u.user_id = md.user_id WHERE u.user_id IN 
		<foreach collection="userIds" index="index" item="item" 
		         open="(" separator="," close=")">
		#{item}
		</foreach>
		AND EXISTS (
		(SELECT * FROM meeting AS m WHERE
		<![CDATA[ DATE_FORMAT(m.start_time, '%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s') ]]>
		<![CDATA[ AND DATE_FORMAT(m.end_time, '%Y-%m-%d %H:%i:%s') > DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s') ]]>
		AND m.cancel = 'no' AND m.m_id = md.m_id)
		UNION
		(SELECT * FROM meeting mt WHERE
		<![CDATA[ DATE_FORMAT(mt.end_time, '%Y-%m-%d %H:%i:%s') >= DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s') ]]>
		<![CDATA[ AND DATE_FORMAT(mt.start_time, '%Y-%m-%d %H:%i:%s') < DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s') ]]>
		AND mt.cancel = 'no' AND mt.m_id = md.m_id)
		UNION
		(SELECT * FROM meeting AS me WHERE
		<![CDATA[ DATE_FORMAT(me.start_time, '%Y-%m-%d %H:%i:%s') >= DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s') ]]>
		<![CDATA[ AND DATE_FORMAT(me.end_time, '%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s') ]]>
		AND me.cancel = 'no' AND me.m_id = md.m_id)
		)
    </select>
    
    <select id="queryAvailableUsersByIdsAndMId" resultMap="uMap">
		SELECT DISTINCT(u.user_id), u.user_name, u.sex, u.position FROM USER u INNER JOIN
		meeting_detail md ON u.user_id = md.user_id WHERE u.user_id IN 
		<foreach collection="userIds" index="index" item="item" 
		         open="(" separator="," close=")">
		#{item}
		</foreach>
		AND EXISTS (
		(SELECT * FROM meeting AS m WHERE m.m_id != #{mId} AND 
		<![CDATA[ DATE_FORMAT(m.start_time, '%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s') ]]>
		<![CDATA[ AND DATE_FORMAT(m.end_time, '%Y-%m-%d %H:%i:%s') > DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s') ]]>
		AND m.cancel = 'no' AND m.m_id = md.m_id)
		UNION
		(SELECT * FROM meeting mt WHERE mt.m_id != #{mId} AND 
		<![CDATA[ DATE_FORMAT(mt.end_time, '%Y-%m-%d %H:%i:%s') >= DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s') ]]>
		<![CDATA[ AND DATE_FORMAT(mt.start_time, '%Y-%m-%d %H:%i:%s') < DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s') ]]>
		AND mt.cancel = 'no' AND mt.m_id = md.m_id)
		UNION
		(SELECT * FROM meeting AS me WHERE me.m_id != #{mId} AND 
		<![CDATA[ DATE_FORMAT(me.start_time, '%Y-%m-%d %H:%i:%s') >= DATE_FORMAT(#{startTime}, '%Y-%m-%d %H:%i:%s') ]]>
		<![CDATA[ AND DATE_FORMAT(me.end_time, '%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(#{endTime}, '%Y-%m-%d %H:%i:%s') ]]>
		AND me.cancel = 'no' AND me.m_id = md.m_id)
		)
    </select>
    
    <select id="pagination" resultMap="userMap">
        select * from user 
        <where>
            and user_state = 'no' 
            <if test="user != null">
                <if test="user.userName != null and user.userName != ''">
                    and user_name = #{user.userName}
                </if>
                <if test="user.sex != null and user.sex != ''">
                    and sex = #{user.sex}
                </if>
                <if test="user.userRole != null and user.userRole != ''">
                    and user_role = #{user.userRole}
                </if>
                <if test="user.position != null and user.position != ''">
                    and position = #{user.position}
                </if>
            </if>
        </where>
        order by user_id limit #{pageStart}, #{pageSize}
    </select>
    
    <select id="getRows" parameterType="User" resultType="int">
        select count(*) from user 
        <where>
            and user_state = 'no' 
            <if test="userName != null and userName != ''">
                and user_name = #{userName}
            </if>
            <if test="sex != null and sex != ''">
                and sex = #{sex}
            </if>
            <if test="userRole != null and userRole != ''">
                and user_role = #{userRole}
            </if>
            <if test="position != null and position != ''">
                and position = #{position}
            </if>
        </where>
    </select>
    
</mapper>